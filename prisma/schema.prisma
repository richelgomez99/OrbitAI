datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String         @id @default(cuid())
  email       String         @unique
  createdAt   DateTime       @default(now())
  reflections Reflection[]
  sessions    FocusSession[]
  tasks       Task[]
  messages    Message[]
}

model Reflection {
  id            String           @id @default(cuid())
  userId        String
  user          User             @relation(fields: [userId], references: [id])
  
  // Core fields
  mood          String
  energy        Int
  win           String?
  challenge     String?
  journal       String?          @map("comment")
  
  // Advanced fields
  emotionLabel  String?          // e.g., "Overstimulated", "At Ease"
  cognitiveLoad Int?             // 0-100 scale
  control      Int?             // 1-5 scale
  clarityGained Boolean?         // Did the user gain clarity?
  
  // Relations
  groundingStrategies GroundingStrategy[]
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model GroundingStrategy {
  id           String     @id @default(cuid())
  name         String     // e.g., "Walk", "Meditation"
  reflectionId String
  reflection   Reflection @relation(fields: [reflectionId], references: [id], onDelete: Cascade)
  
  @@unique([reflectionId, name])
}

model FocusSession {
  id        String   @id @default(cuid())
  mode      String
  startedAt DateTime
  endedAt   DateTime?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Task {
  id              String   @id @default(cuid())
  title           String
  content         String?  // Mapped from Drizzle's 'description'
  status          String   @default("TODO") // Using string with enum in TypeScript
  priority        String   @default("MEDIUM") // Using string with enum in TypeScript
  estimatedTime   Int?     // In minutes
  mode            String?  // Using string with enum in TypeScript
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   // Assuming tasks must have a user
  user            User     @relation(fields: [userId], references: [id])
  messages        Message[] @relation("TaskMessages") // Explicit relation name
}

// Note: We're using string fields with enum validation in TypeScript code
// instead of database enums to avoid migration issues and improve flexibility

model Message {
  id            String    @id @default(cuid())
  role          String    // "user" or "assistant"
  content       String
  createdAt     DateTime  @default(now())
  userId        String?   // Made optional as seed data had null userId for messages
  user          User?     @relation(fields: [userId], references: [id])
  taskId        String?   // Optional: if message is related to a task
  task          Task?     @relation(fields: [taskId], references: [id], name: "TaskMessages")
}
