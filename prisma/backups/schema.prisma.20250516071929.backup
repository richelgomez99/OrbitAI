generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  createdAt       DateTime         @default(now())
  currentStreak   Int              @default(0)
  defaultMode     UserMode         @default(BUILD)
  lastActive      DateTime?
  longestStreak   Int              @default(0)
  updatedAt       DateTime         @updatedAt
  sessions        FocusSession[]
  messages        Message[]
  modeSessions    ModeSession[]
  modeTransitions ModeTransition[]
  reflections     Reflection[]
  tasks           Task[]
  userStates      UserState[]
}

model Reflection {
  id                  String              @id @default(cuid())
  mood                String
  energy              Int
  createdAt           DateTime            @default(now())
  userId              String
  cognitiveLoad       Int?
  updatedAt           DateTime            @updatedAt
  clarityGained       Boolean?
  emotionLabel        String?
  challenges          String?
  controlRating       Int?
  journalEntry        String?
  moodEmoji           String?
  sessionId           String?
  wins                String?
  groundingSources    GroundingSource[]
  groundingStrategies GroundingStrategy[]
  session             FocusSession?       @relation(fields: [sessionId], references: [id])
  user                User                @relation(fields: [userId], references: [id])

  @@index([userId])
}

model GroundingStrategy {
  id           String        @id @default(cuid())
  name         String
  reflectionId String
  mode         UserMode
  sessionId    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reflection   Reflection    @relation(fields: [reflectionId], references: [id], onDelete: Cascade)
  session      FocusSession? @relation(fields: [sessionId], references: [id])

  @@index([reflectionId])
}

model GroundingSource {
  id           String     @id @default(cuid())
  name         String
  reflectionId String
  createdAt    DateTime   @default(now())
  reflection   Reflection @relation(fields: [reflectionId], references: [id], onDelete: Cascade)

  @@index([reflectionId])
}

model Task {
  id               String         @id @default(cuid())
  title            String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  completedAt      DateTime?      @db.Timestamptz(6)
  description      String?
  dueAt            DateTime?      @db.Timestamptz(6)
  estimatedMinutes Int?
  timeSpentMinutes Int?           @default(0)
  status           TaskStatus     @default(TODO)
  priority         Priority       @default(MEDIUM)
  mode             UserMode       @default(BUILD)
  sessions         FocusSession[] @relation("TaskSessions")
  messages         Message[]      @relation("TaskMessages")
  user             User           @relation(fields: [userId], references: [id])
  userStates       UserState[]

  @@index([userId, status])
  @@index([userId, priority])
  @@index([userId, dueAt])
}

model FocusSession {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now())
  userId              String
  endTime             DateTime?
  energyEnd           Int?
  energyStart         Int?
  focusScore          Int?
  startTime           DateTime            @default(now())
  taskId              String?
  updatedAt           DateTime            @updatedAt
  mode                UserMode
  task                Task?               @relation("TaskSessions", fields: [taskId], references: [id])
  user                User                @relation(fields: [userId], references: [id])
  groundingStrategies GroundingStrategy[]
  reflections         Reflection[]

  @@index([userId])
}

model ModeTransition {
  id              String   @id @default(cuid())
  userId          String
  fromMode        UserMode
  toMode          UserMode
  durationSeconds Int
  trigger         String
  metadata        Json?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model UserState {
  id            String    @id @default(cuid())
  userId        String
  mood          Int?
  energy        Int?
  focus         Int?
  stress        Int?
  currentMode   UserMode?
  currentTaskId String?
  metadata      Json?
  createdAt     DateTime  @default(now())
  currentTask   Task?     @relation(fields: [currentTaskId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model ModeSession {
  id          String    @id @default(cuid())
  userId      String
  mode        UserMode
  startTime   DateTime
  endTime     DateTime?
  energyStart Int?
  energyEnd   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId, startTime])
}

model Message {
  id        String   @id @default(cuid())
  role      String
  content   String
  createdAt DateTime @default(now())
  userId    String?
  taskId    String?
  task      Task?    @relation("TaskMessages", fields: [taskId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

enum UserMode {
  BUILD
  FLOW
  RESTORE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  DONE
  ARCHIVED
  PENDING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
